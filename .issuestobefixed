
. Modify app.py:

To modify app.py to include database initialization, you'll need to import the main function from database_setup.py and call it before starting the Flask app. Here's a simplified example:

python

# app.py
from flask import Flask
from models import db
from database_setup import main as setup_database

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///instance/stations.db'
db.init_app(app)

# Call this function to setup the database
setup_database()

@app.route('/')
def index():
    return "Hello, World!"

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0')

Make sure database_setup.py is structured so that it can be imported and its main functionality can be called as a function. This could be as simple as wrapping your existing code in a main() function.
2. Custom Startup Script:

Alternatively, you can create a custom startup script that runs both database_setup.py and app.py. First, create a script, e.g., start.sh:

bash

#!/bin/bash
# start.sh

# Run the database setup script
python database_setup.py

# Start the Flask application
python app.py

Make this script executable by running chmod +x start.sh in your terminal.

Then, modify your Dockerfile to use this script:

Dockerfile

# Use an official Python runtime as a parent image
FROM python:3.9-slim

# Set the working directory in the container
WORKDIR /usr/src/app

# Copy the current directory contents into the container at /usr/src/app
COPY . .

# Install any needed packages specified in requirements.txt
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Make port 5000 available to the world outside this container
EXPOSE 5000

# Define environment variable
ENV NAME World

# Make the startup script executable and run it
COPY start.sh .
RUN chmod +x start.sh
CMD ["./start.sh"]

This Dockerfile first copies the start.sh script into the container, makes it executable, and then specifies that it should be run when the container starts.
